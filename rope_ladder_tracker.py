#!/usr/bin/env python3
"""
motion_drone_rope_ladder.py

–°–∏—Å—Ç–µ–º–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É "–≤–µ—Ä—ë–≤–æ—á–Ω–æ–π –ª–µ—Å—Ç–Ω–∏—Ü—ã":
- waypoints[0] = —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ (anchor)
- –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –≤–ø–µ—Ä—ë–¥ (—É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç anchor)
- –£–¥–∞–ª—è–µ–º —Ç–æ—á–∫–∏ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ (–µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π)
- –°–æ—Ö—Ä–∞–Ω—è–µ–º (0,0) –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ waypoints[0]
"""

import cv2
import numpy as np
import time
import logging
import json
import os

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
FOCAL_LENGTH_X = 300
FOCAL_LENGTH_Y = 300
IMAGE_WIDTH_PX = 640
IMAGE_HEIGHT_PX = 480

MIN_FEATURES = 50
DISTANCE_THRESHOLD = 15.0       # –ø–æ—Ä–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏ (–ø–∏–∫—Å–µ–ª–∏)
BACKTRACK_MARGIN = 5.0           # –∑–∞–ø–∞—Å –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
TARGET_FPS = 30
FRAME_INTERVAL = 1.0 / TARGET_FPS

FLAG_PATH = '/home/orangepi/tracking_enabled.flag'

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        #logging.FileHandler("/home/orangepi/motion_tracker.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

def is_tracking_enabled():
    try:
        with open(FLAG_PATH, 'r') as f:
            return f.read().strip() == '1'
    except:
        return False

def save_offset(x_px, y_px, angle=0.0):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ –≤ –ø–∏–∫—Å–µ–ª—è—Ö ‚Äî –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä.
    """
    data = {
        'x': int(x_px),
        'y': int(y_px),
        'angle': float(angle)
    }
    temp_file = 'offsets_tmp.json'
    final_file = 'offsets.json'
    try:
        with open(temp_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2)
        os.replace(temp_file, final_file)
    except Exception as e:
        logging.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å offset: {e}")

def adaptive_good_features(gray):
    clahe = cv2.createCLAHE(clipLimit=2.5, tileGridSize=(8, 8))
    enhanced = clahe.apply(gray)
    mean_val, std_val = cv2.meanStdDev(gray)
    std_scalar = std_val[0, 0]
    quality_level = max(0.01, 0.1 * (1 - std_scalar / 50))
    h, w = gray.shape
    area = h * w
    num_features = max(50, min(1000, area // 200))
    min_distance = max(5, int(np.sqrt(area / num_features)))
    points = cv2.goodFeaturesToTrack(
        enhanced,
        maxCorners=num_features,
        qualityLevel=float(quality_level),
        minDistance=min_distance,
        blockSize=7
    )
    return points

def add_waypoint(waypoints, points, angle=None, frame_idx=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Ç–æ—á–∫—É –Ω–∞ –ª–µ—Å—Ç–Ω–∏—Ü–µ"""
    if points is None or len(points) < MIN_FEATURES:
        return
    wp = {
        'frame': frame_idx,
        'points': np.array(points, copy=True),
        'angle': angle,
        'center': np.mean(np.array(points).reshape(-1, 2), axis=0)
    }
    waypoints.append(wp)

def rope_ladder_waypoint_management(waypoints, current_points, current_angle=None, distance_threshold=DISTANCE_THRESHOLD):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∞–º–∏ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É –≤–µ—Ä—ë–≤–æ—á–Ω–æ–π –ª–µ—Å—Ç–Ω–∏—Ü—ã
    """
    if len(waypoints) == 0:
        return waypoints

    curr_center = np.mean(np.array(current_points).reshape(-1, 2), axis=0)
    anchor_center = waypoints[0]['center']
    current_to_anchor_dist = np.linalg.norm(curr_center - anchor_center)

    # –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–π —Ç–æ—á–∫–∏
    closest_dist = float('inf')
    closest_idx = -1
    for i, wp in enumerate(waypoints):
        dist = np.linalg.norm(wp['center'] - curr_center)
        if dist < closest_dist:
            closest_dist = dist
            closest_idx = i

    # === ‚úÖ –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ len >= 1 ===
    if closest_dist > distance_threshold:
        if len(waypoints) == 1:
            # –ü–µ—Ä–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ç–æ—á–∫–∏
            last_to_anchor = 0.0
            if current_to_anchor_dist > BACKTRACK_MARGIN:
                add_waypoint(waypoints, current_points, current_angle, None)
                logging.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–æ—á–∫–∞ 1 (–ø–µ—Ä–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –æ—Ç —Å—Ç–∞—Ä—Ç–∞)")
        else:
            # –£–∂–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 2 —Ç–æ—á–∫–∏
            last_center = waypoints[-1]['center']
            last_to_anchor = np.linalg.norm(last_center - anchor_center)
            if current_to_anchor_dist > last_to_anchor + BACKTRACK_MARGIN:
                add_waypoint(waypoints, current_points, current_angle, None)
                logging.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç–æ—á–∫–∞ (—É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç —Å—Ç–∞—Ä—Ç–∞)")
    # –í–æ–∑–≤—Ä–∞—Ç ‚Äî —É–¥–∞–ª—è–µ–º —Ö–≤–æ—Å—Ç
    elif closest_idx > 0:
        waypoints[:] = waypoints[:closest_idx + 1]
        logging.info(f"üîô –í–æ–∑–≤—Ä–∞—Ç –∫ —Ç–æ—á–∫–µ {closest_idx}. –£–¥–∞–ª–µ–Ω—ã –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ.")

    return waypoints

def main():
    logging.info("üöÄ Rope Ladder Tracker: –≤–æ–∑–≤—Ä–∞—Ç —á–µ—Ä–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é")

    cap = cv2.VideoCapture(0)
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, IMAGE_WIDTH_PX)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, IMAGE_HEIGHT_PX)
    cap.set(cv2.CAP_PROP_FPS, TARGET_FPS)

    if not cap.isOpened():
        logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É.")
        return 1

    ret, frame = cap.read()
    if not ret or frame is None:
        logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä.")
        return 1

    SHOW_DISPLAY = False
    if SHOW_DISPLAY:
        cv2.namedWindow("Rope Ladder Tracker", cv2.WINDOW_NORMAL)

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    tracked_points = adaptive_good_features(gray)
    if tracked_points is None or len(tracked_points) < MIN_FEATURES:
        logging.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.")
        return 1

    prev_gray = gray.copy()
    frame_idx = 0

    # === ü™ú –í–µ—Ä—ë–≤–æ—á–Ω–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞ ===
    waypoints = []
    anchor_center = np.mean(np.array(tracked_points).reshape(-1, 2), axis=0)
    add_waypoint(waypoints, tracked_points, frame_idx=frame_idx)

    lk_params = dict(
        winSize=(21, 21),
        maxLevel=3,
        criteria=(cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 30, 0.01)
    )

    fps = 0.0
    frame_count = 0
    start_time = time.time()

    try:
        while True:
            loop_start = time.time()

            ret, frame = cap.read()
            if not ret or frame is None:
                logging.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∫–∞–¥—Ä ‚Äî –ø—Ä–æ–ø—É—Å–∫")
                time.sleep(FRAME_INTERVAL)
                continue

            frame_idx += 1
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

            # --- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ ---
            new_points, status, _ = cv2.calcOpticalFlowPyrLK(prev_gray, gray, tracked_points, None, **lk_params)
            if new_points is None or status is None:
                tracked_points = adaptive_good_features(gray)
                if tracked_points is None:
                    tracked_points = np.array([])
                prev_gray = gray
                continue

            good_indices = [i for i, s in enumerate(status) if s == 1]
            if len(good_indices) < MIN_FEATURES:
                tracked_points = adaptive_good_features(gray)
                if tracked_points is None:
                    tracked_points = np.array([])
            else:
                tracked_points = new_points[good_indices]

            prev_gray = gray.copy()
            
            # === üîí –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç—ã—Ö —Ç–æ—á–µ–∫ ===
            if tracked_points is None or len(tracked_points) == 0:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º 0,0 ‚Äî –∫–∞–∫ "–ø–æ—Ç–µ—Ä—è–ª–∏ —Ç—Ä–µ–∫–∏–Ω–≥"
                save_offset(0, 0)
                logging.warning("‚ö†Ô∏è –ù–µ—Ç —Ç–æ—á–µ–∫ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º (0, 0)")
                continue


            # === ü™ú –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "–ª–µ—Å—Ç–Ω–∏—Ü–µ–π" ===
            rope_ladder_waypoint_management(waypoints, tracked_points, current_angle=None)


            # === üè† –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤–µ—Ä–Ω—É–ª–∏—Å—å –ª–∏ –≤ —Å—Ç–∞—Ä—Ç? ===
            current_center = np.mean(np.array(tracked_points).reshape(-1, 2), axis=0)
            anchor_center = waypoints[0]['center']
            dist_to_start = np.linalg.norm(current_center - anchor_center)

            if dist_to_start < DISTANCE_THRESHOLD:
                save_offset(0, 0)
                logging.info(f"üéØ –í–û–ó–í–†–ê–¢ –í –°–¢–ê–†–¢! (dist={dist_to_start:.1f}px)")
            else:
                # –°–º–µ—â–µ–Ω–∏–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É
                dx_px = anchor_center[0] - current_center[0]
                dy_px = anchor_center[1] - current_center[1]
                save_offset(int(dx_px), int(dy_px))

            # === üìä FPS ===
            frame_count += 1
            elapsed = time.time() - start_time
            if elapsed >= 1.0:
                fps = frame_count / elapsed
                logging.info(f"üìä {fps:.1f} FPS | dx={dx_px:+.3f}–º | dy={dy_px:+.3f}–º | WPs={len(waypoints)}")
                frame_count = 0
                start_time = time.time()

            # === üñºÔ∏è –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ===
            if SHOW_DISPLAY:
                display = frame.copy()
                status = "HOME" if dist_to_start < DISTANCE_THRESHOLD else f"WP {len(waypoints)-1}"
                color = (0, 255, 0) if dist_to_start < DISTANCE_THRESHOLD else (255, 165, 0)
                cv2.putText(display, status, (20, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, color, 2)
                cv2.putText(display, f"WPs: {len(waypoints)}", (20, 85), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 1)
                for pt in tracked_points:
                    cv2.circle(display, (int(pt[0][0]), int(pt[0][1])), 2, (255, 0, 0), -1)
                cv2.imshow("Rope Ladder Tracker", display)
                if cv2.waitKey(1) & 0xFF == ord('q'):
                    break

            loop_time = time.time() - loop_start
            if loop_time < FRAME_INTERVAL:
                time.sleep(FRAME_INTERVAL - loop_time)

    except KeyboardInterrupt:
        logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logging.error(f"üí• –û—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        cap.release()
        if SHOW_DISPLAY:
            cv2.destroyAllWindows()
        logging.info("üëã –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    return 0

if __name__ == "__main__":
    exit(main())